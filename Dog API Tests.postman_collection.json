{
	"info": {
		"_postman_id": "3d9589df-ec84-40e8-9960-57ed7027c5c9",
		"name": "Dog API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23981189"
	},
	"item": [
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"    const schema = {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"message\": {",
							"                \"type\": \"object\"",
							"            },",
							"            \"status\": {",
							"                \"type\": \"string\"",
							"            }",
							"        },",
							"        \"required\": [\"message\", \"status\"]",
							"    };",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"pm.test(\"Breeds list is not empty\", function () {",
							"    const breeds = Object.keys(pm.response.json().message);",
							"    pm.expect(breeds.length).to.be.above(0);",
							"});",
							"",
							"pm.test(\"Specific breeds are present\", function () {",
							"    const breeds = Object.keys(pm.response.json().message);",
							"    pm.expect(breeds).to.include.members([\"appenzeller\", \"bulldog\"]);",
							"});",
							"",
							"pm.test(\"No duplicate breeds\", function () {",
							"    const breeds = Object.keys(pm.response.json().message);",
							"    const uniqueBreeds = new Set(breeds);",
							"    pm.expect(uniqueBreeds.size).to.eql(breeds.length);",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// Extract the list of dog breeds",
							"const breedsData = pm.response.json().message;",
							"let individualBreeds = [];",
							"",
							"// Loop through the breed names",
							"for (const breed in breedsData) {",
							"    // If the breed has sub-breeds, combine them with the breed name",
							"    if (breedsData[breed].length) {",
							"        breedsData[breed].forEach(subBreed => {",
							"            individualBreeds.push(`${subBreed} ${breed}`);",
							"        });",
							"    } else {",
							"        // If no sub-breeds, add the breed name directly",
							"        individualBreeds.push(breed);",
							"    }",
							"}",
							"",
							"// Log the list of individual breeds",
							"console.log(individualBreeds);",
							"",
							"// Store the list as an environment variable (optional)",
							"pm.environment.set(\"individualBreeds\", JSON.stringify(individualBreeds));",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dog.ceo/api/breeds/list/all",
					"protocol": "https",
					"host": [
						"dog",
						"ceo"
					],
					"path": [
						"api",
						"breeds",
						"list",
						"all"
					]
				}
			},
			"response": []
		}
	]
}